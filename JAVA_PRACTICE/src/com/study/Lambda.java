package com.study;
//람다식

@FunctionalInterface //함수형 인터페이스 : 단 하나의 추상 메서드만 선언된 인터페이스
//애노테이션 붙이면 컴파일러가 검사해준다.
//사용 목적 : 참조 변수로 익명객체(람다식)를 참조 가능
interface Itest{
	int add(int x, int y); //public abstract int add(int x, int y);
}
public class Lambda {
	//람다식 : 익명함수
	// 리턴타입과 메서드명을 지움
	// (파라미터) -> {실행코드;}
	
	// 함수와 메서드의 차이
	// 함수는 클래스와 별개로 독립적으로 실행 가능
	// 메서드는 클래스 안에 정의한 함수로, 클래스 없이는 실행 불가(종속적)
	// 자바의 모든 함수는 클래스 안에서만 선언 가능
	// 자바의 모든 함수는 메서드
	// 그래서 자바는 함수가 없고 메서드만 있다고도 말한다.
	// 자바의 함수(메서드)는 클래스 없이는 사용불가.
	
	//람다식 : 메서드를 간단히 표현하기 위한 표현식
	/*
	 	리턴 값만 존재하는 경우 return 키워드 생략 가능함(끝에 ;안붙임)
	 	실행 코드가 1줄인 경우 {} 생략 가능, 한 줄이면 문장끝에 ; 안붙인다(붙이면 컴파일 에러)
	 	{}안에서만 ;붙임
	 	람다식 리턴이 단일 표현식이면 ; 생략 필수
	 	
	 	파라미터의 타입 추론이 가능하면 생략 가능하다(대부분 생략함)
	 */
	
	/*
	  주의점 : 파라미터가 1개인 경우 ()생략 가능
	  			(파라미터 타입 생략이 없을 때만)
	  		파라미터 타입을 명시할 경우 파라미터가 1개여도 ()생략 못함
	  		
	  		실행 블록이 1줄일 경우에는 {}생략 가능하고 이 경우 ;안붙임
	  		
	 */
	

	
	public static void main(String[] args) {
		// 자바의 람다식은 익명 객체를 간단히 표현한 것
		// 함수형 인터페이스타입의 참조변수로 담아서 사용함
		/*Itest test = new Itest(){
			public int add(int x, int y) { // 접근 제어자는 좁게 못바꿈(오버라이딩)
				return x + y;
			}
		};
		
		System.out.println(test.add(1, 2));
		*/
		
		Itest test = (x, y) -> x + y;
		System.out.println(test.add(2, 2));
		
		
	}
	
}


